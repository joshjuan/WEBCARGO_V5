<?php

namespace frontend\controllers;

use common\models\LoginForm;
use frontend\models\AwaitingReceive;
use frontend\models\AwaitingReceiveReport;
use frontend\models\BorderPort;
use frontend\models\FaultDevices;
use frontend\models\FaultDevicesReport;
use frontend\models\ReceivedDevicesReport;
use frontend\models\ReleasedDevicesReport;
use frontend\models\StockDevices;
use frontend\models\StockDevicesReport;
use frontend\models\TransferDevicesReport;
use http\Exception;
use Yii;
use frontend\models\Devices;
use frontend\models\DevicesSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * DevicesController implements the CRUD actions for Devices model.
 */
class DevicesController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest) {
            return $this->redirect(['site/login'])->send();  // login path
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Devices models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionIndexSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchIndex(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionAccount()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAccount(Yii::$app->request->queryParams);

        return $this->render('account', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionActive()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchActive(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionAccountSearch()
    {

        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAccountResults(Yii::$app->request->queryParams);

        return $this->render('account', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionAwaitingStorage()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAwaitingStorage(Yii::$app->request->queryParams);

        return $this->render('awaiting-storage', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionAwaitingStorageSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAwaitingStorageResults(Yii::$app->request->queryParams);

        return $this->render('awaiting-storage', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionStorage()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchStorage(Yii::$app->request->queryParams);

        return $this->render('storage', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }
    public function actionStorageSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchStorageResults(Yii::$app->request->queryParams);

        return $this->render('storage', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionAwaitingAllocation()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAwaitingAllocation(Yii::$app->request->queryParams);

        return $this->render('awaiting-allocation', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }



    public function actionSearchAwait()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAwait(Yii::$app->request->queryParams);

        return $this->render('await_receive', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

//
//    public function actionAwaitingReceive()
//    {
//        $searchModel = new DevicesSearch();
//        $dataProvider = $searchModel->searchAwaitReceive(Yii::$app->request->queryParams);
//
//        return $this->render('await_receive', [
//            'searchModel' => $searchModel,
//            'dataProvider' => $dataProvider,
//        ]);
//    }


    public function actionRegisterToAccount()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {

            $total = 0;
            foreach ($selection as $key => $value) {

                try {
                    $e = Devices::find()
                        // ->select(['serial_no'])
                        ->where(['id' => $value])
                        ->andWhere(['view_status' => Devices::registration])
                        ->one();

                    if ($e) {

                        $total = $key + 1;

                        $datetime = date('Y-m-d H:i:s');

                        Devices::updateAll([
                            'received_from' => Devices::registration,
                            // 'border_port' => $e['border_port'],
                            //'received_status' => StockDevices::available,
                            'created_at' => $datetime,
                            'created_by' => Yii::$app->user->identity->id,
                            'view_status' => Devices::accounts,
                            'movement_unique_id' => $movementID,
                        ], ['serial_no' => $e['serial_no']]);


                        Yii::$app->db->createCommand()
                            ->upsert(
                                'devices_reports',
                                [
                                    'serial_no' => $e['serial_no'],
                                    'received_from' => Devices::registration,
                                    'received_to' => Devices::accounts,
                                    'type' => $e['type'],
                                    'device_category' => $e['device_category'],
                                    'branch' => $e['branch'],
                                    'created_by' => Yii::$app->user->identity->id,
                                    'created_at' => $datetime,
                                    'movement_unique_id' => $movementID,
                                ],
                                false
                            )
                            ->execute();
                    }


                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Failed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['index']);
                }

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . $total . ' have been  successfully processed',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['index']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['index']);
        }


    }

    public function actionAccountsToAwaitstore()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {

            $total = 0;
            foreach ($selection as $key => $value) {

                try {
                    $e = Devices::find()
                        // ->select(['serial_no'])
                        ->where(['id' => $value])
                        ->andWhere(['view_status' => Devices::accounts])
                        ->one();

                    if ($e) {

                        $total = $key + 1;

                        $datetime = date('Y-m-d H:i:s');

                        Devices::updateAll([
                            'received_from' => Devices::accounts,
                            // 'border_port' => $e['border_port'],
                            //'received_status' => StockDevices::available,
                            'created_at' => $datetime,
                            'created_by' => Yii::$app->user->identity->id,
                            'view_status' => Devices::awaiting_store,
                            'movement_unique_id' => $movementID,
                        ], ['serial_no' => $e['serial_no']]);


                        Yii::$app->db->createCommand()
                            ->upsert(
                                'devices_reports',
                                [
                                    'serial_no' => $e['serial_no'],
                                    'received_from' => Devices::accounts,
                                    'received_to' => Devices::awaiting_store,
                                    'type' => $e['type'],
                                    'device_category' => $e['device_category'],
                                    'branch' => $e['branch'],
                                    'created_by' => Yii::$app->user->identity->id,
                                    'created_at' => $datetime,
                                    'movement_unique_id' => $movementID,
                                ],
                                false
                            )
                            ->execute();
                    }


                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Failed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['account']);
                }

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . $total . ' have been  successfully processed',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['account']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['account']);
        }


    }

    public function actionAwaitingToStore()
    {

        if (Yii::$app->user->can('awaitStorageToStoreToIntransitToFault')){
            $action = Yii::$app->request->post('action');


            $selection = (array)Yii::$app->request->post('selection');

            $movementID = strtoupper(Yii::$app->security->generateRandomString());

            if ($selection) {

                // Move to Store

                if ($action == 1) {
                    $total = 0;
                    foreach ($selection as $key => $value) {

                        try {
                            $e = Devices::find()
                                // ->select(['serial_no'])
                                ->where(['id' => $value])
                                ->andWhere(['view_status' => Devices::awaiting_store])
                                ->one();

                            if ($e) {

                                $total = $key + 1;

                                $datetime = date('Y-m-d H:i:s');

                                Devices::updateAll([
                                    'received_from' => Devices::awaiting_store,
                                    // 'border_port' => $e['border_port'],
                                    //'received_status' => StockDevices::available,
                                    'created_at' => $datetime,
                                    'created_by' => Yii::$app->user->identity->id,
                                    'view_status' => Devices::store,
                                    'movement_unique_id' => $movementID,
                                ], ['serial_no' => $e['serial_no']]);


                                Yii::$app->db->createCommand()
                                    ->upsert(
                                        'devices_reports',
                                        [
                                            'serial_no' => $e['serial_no'],
                                            'received_from' => Devices::awaiting_store,
                                            'received_to' => Devices::store,
                                            'type' => $e['type'],
                                            'device_category' => $e['device_category'],
                                            'branch' => $e['branch'],
                                            'created_by' => Yii::$app->user->identity->id,
                                            'created_at' => $datetime,
                                            'movement_unique_id' => $movementID,
                                        ],
                                        false
                                    )
                                    ->execute();
                            }


                        } catch (\Exception $e) {
                            Yii::$app->session->setFlash('', [
                                'type' => 'danger',
                                'duration' => 5000,
                                'icon' => 'fa fa-check',
                                'message' => 'Failed',
                                'positonY' => 'top',
                                'positonX' => 'right',
                            ]);

                            return $this->redirect(['awaiting-storage']);
                        }

                    }


                    Yii::$app->session->setFlash('', [
                        'type' => 'success',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Total device ' . $total . ' have been  successfully processed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['awaiting-storage']);
                } //move to fault
                elseif ($action == 2) {
                    $total = 0;
                    foreach ($selection as $key => $value) {

                        try {
                            $e = Devices::find()
                                // ->select(['serial_no'])
                                ->where(['id' => $value])
                                ->andWhere(['view_status' => Devices::awaiting_store])
                                ->one();

                            if ($e) {

                                $total = $key + 1;

                                $datetime = date('Y-m-d H:i:s');

                                Devices::updateAll([
                                    'received_from' => Devices::awaiting_store,
                                    // 'border_port' => $e['border_port'],
                                    //'received_status' => StockDevices::available,
                                    'created_at' => $datetime,
                                    'created_by' => Yii::$app->user->identity->id,
                                    'view_status' => Devices::fault_devices,
                                    'movement_unique_id' => $movementID,
                                ], ['serial_no' => $e['serial_no']]);


                                Yii::$app->db->createCommand()
                                    ->upsert(
                                        'devices_reports',
                                        [
                                            'serial_no' => $e['serial_no'],
                                            'received_from' => Devices::awaiting_store,
                                            'received_to' => Devices::fault_devices,
                                            'type' => $e['type'],
                                            'device_category' => $e['device_category'],
                                            'branch' => $e['branch'],
                                            'created_by' => Yii::$app->user->identity->id,
                                            'created_at' => $datetime,
                                            'movement_unique_id' => $movementID,
                                        ],
                                        false
                                    )
                                    ->execute();
                            }


                        } catch (\Exception $e) {
                            Yii::$app->session->setFlash('', [
                                'type' => 'danger',
                                'duration' => 5000,
                                'icon' => 'fa fa-check',
                                'message' => 'Failed',
                                'positonY' => 'top',
                                'positonX' => 'right',
                            ]);

                            return $this->redirect(['awaiting-storage']);
                        }

                    }


                    Yii::$app->session->setFlash('', [
                        'type' => 'success',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Total device ' . $total . ' have been  successfully processed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['storage']);
                } //move to intransit
                elseif ($action == 3) {

                    $total = 0;
                    foreach ($selection as $key => $value) {

                        try {
                            $e = Devices::find()
                                // ->select(['serial_no'])
                                ->where(['id' => $value])
                                ->andWhere(['view_status' => Devices::awaiting_store])
                                ->one();

                            if ($e) {

                                $total = $key + 1;

                                $datetime = date('Y-m-d H:i:s');

                                Devices::updateAll([
                                    'received_from' => Devices::awaiting_store,
                                    // 'border_port' => $e['border_port'],
                                    //'received_status' => StockDevices::available,
                                    'created_at' => $datetime,
                                    'created_by' => Yii::$app->user->identity->id,
                                    'view_status' => Devices::in_transit,
                                    'movement_unique_id' => $movementID,
                                ], ['serial_no' => $e['serial_no']]);


                                Yii::$app->db->createCommand()
                                    ->upsert(
                                        'devices_reports',
                                        [
                                            'serial_no' => $e['serial_no'],
                                            'received_from' => Devices::awaiting_store,
                                            'received_to' => Devices::in_transit,
                                            'type' => $e['type'],
                                            'device_category' => $e['device_category'],
                                            'branch' => $e['branch'],
                                            'created_by' => Yii::$app->user->identity->id,
                                            'created_at' => $datetime,
                                            'movement_unique_id' => $movementID,
                                        ],
                                        false
                                    )
                                    ->execute();
                            }


                        } catch (\Exception $e) {
                            Yii::$app->session->setFlash('', [
                                'type' => 'danger',
                                'duration' => 5000,
                                'icon' => 'fa fa-check',
                                'message' => 'Failed',
                                'positonY' => 'top',
                                'positonX' => 'right',
                            ]);

                            return $this->redirect(['awaiting-storage']);
                        }

                    }


                    Yii::$app->session->setFlash('', [
                        'type' => 'success',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Total device ' . $total . ' have been  successfully processed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['awaiting-storage']);
                } else {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Please select moving point',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);
                    return $this->redirect(['awaiting-storage']);
                }


            }
            else {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Please select any device',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);
                return $this->redirect(['awaiting-storage']);
            }
        }
        else{

            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Failed',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['awaiting-storage']);

        }



    }

    public function actionStoreToAwaitAllocation()
    {

        $action = Yii::$app->request->post('action');


        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {


            // Move to Allocation

            if ($action == 1) {
                $total = 0;
                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::store])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');

                            Devices::updateAll([
                                'received_from' => Devices::store,
                                // 'border_port' => $e['border_port'],
                                //'received_status' => StockDevices::available,
                                'created_at' => $datetime,
                                'created_by' => Yii::$app->user->identity->id,
                                'view_status' => Devices::awaiting_allocation,
                                'movement_unique_id' => $movementID,
                            ], ['serial_no' => $e['serial_no']]);


                            Yii::$app->db->createCommand()
                                ->upsert(
                                    'devices_reports',
                                    [
                                        'serial_no' => $e['serial_no'],
                                        'received_from' => Devices::store,
                                        'received_to' => Devices::awaiting_allocation,
                                        'type' => $e['type'],
                                        'device_category' => $e['device_category'],
                                        'branch' => $e['branch'],
                                        'created_by' => Yii::$app->user->identity->id,
                                        'created_at' => $datetime,
                                        'movement_unique_id' => $movementID,
                                    ],
                                    false
                                )
                                ->execute();
                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['storage']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['storage']);
            } //move to Await Store
            elseif ($action == 2) {
                $total = 0;
                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::awaiting_store])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');

                            Devices::updateAll([
                                'received_from' => Devices::awaiting_store,
                                // 'border_port' => $e['border_port'],
                                //'received_status' => StockDevices::available,
                                'created_at' => $datetime,
                                'created_by' => Yii::$app->user->identity->id,
                                'view_status' => Devices::fault_devices,
                                'movement_unique_id' => $movementID,
                            ], ['serial_no' => $e['serial_no']]);


                            Yii::$app->db->createCommand()
                                ->upsert(
                                    'devices_reports',
                                    [
                                        'serial_no' => $e['serial_no'],
                                        'received_from' => Devices::awaiting_store,
                                        'received_to' => Devices::fault_devices,
                                        'type' => $e['type'],
                                        'device_category' => $e['device_category'],
                                        'branch' => $e['branch'],
                                        'created_by' => Yii::$app->user->identity->id,
                                        'created_at' => $datetime,
                                        'movement_unique_id' => $movementID,
                                    ],
                                    false
                                )
                                ->execute();
                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['storage']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['awaiting-storage']);
            } else {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Please select moving point',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);
                return $this->redirect(['storage']);
            }


        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Please select any device',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['storage']);
        }


    }

    public function actionAllocateDevice()
    {

        $action = Yii::$app->request->post('action');
        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($action == ''){
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Please select any tagger',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['awaiting-allocation']);
        }

        if ($selection) {


            // Move to awaiting storage

            if ($action == 0) {
                $total = 0;
                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::awaiting_allocation])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');

                            Devices::updateAll([
                                'received_from' => Devices::awaiting_allocation,
                                // 'border_port' => $e['border_port'],
                                //'received_status' => StockDevices::available,
                                'created_at' => $datetime,
                                'created_by' => Yii::$app->user->identity->id,
                                'view_status' => Devices::awaiting_store,
                                'movement_unique_id' => $movementID,
                                'border_port' => null,
                                'transferred_from' => null,
                                'transferred_to' => null,
                                'transferred_date' => null,
                                'transferred_by' => null,
                            ], ['serial_no' => $e['serial_no']]);


                            Yii::$app->db->createCommand()
                                ->upsert(
                                    'devices_reports',
                                    [
                                        'serial_no' => $e['serial_no'],
                                        'received_from' => Devices::awaiting_allocation,
                                        'received_to' => Devices::awaiting_store,
                                        'type' => $e['type'],
                                        'device_category' => $e['device_category'],
                                        'branch' => $e['branch'],
                                        'created_by' => Yii::$app->user->identity->id,
                                        'created_at' => $datetime,
                                        'movement_unique_id' => $movementID,
                                    ],
                                    false
                                )
                                ->execute();
                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['awaiting-allocation']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['awaiting-allocation']);
            }

            //move to Specific tagger
            else {
                $total = 0;
                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::awaiting_allocation])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');

                            Devices::updateAll([
                                'received_from' => Devices::awaiting_allocation,
                                // 'border_port' => $e['border_port'],
                                //'received_status' => StockDevices::available,
                                'released_by' => Yii::$app->user->identity->id,
                                'released_to' => $action,
                                'released_date' => $datetime,
                                'created_at' => $datetime,
                                'created_by' => Yii::$app->user->identity->id,
                                'view_status' => Devices::released,
                                'movement_unique_id' => $movementID,
                                'transferred_from' => null,
                                'transferred_to' => null,
                                'transferred_date' => null,
                                'transferred_by' => null,
                            ], ['serial_no' => $e['serial_no']]);


                            Yii::$app->db->createCommand()
                                ->upsert(
                                    'devices_reports',
                                    [
                                        'serial_no' => $e['serial_no'],
                                        'received_from' => Devices::awaiting_allocation,
                                        'received_to' => Devices::released,
                                        'type' => $e['type'],
                                        'device_category' => $e['device_category'],
                                        'branch' => $e['branch'],
                                        'created_by' => Yii::$app->user->identity->id,
                                        'created_at' => $datetime,
                                        'movement_unique_id' => $movementID,
                                        'released_by' => Yii::$app->user->identity->id,
                                        'released_to' => $action,
                                    ],
                                    false
                                )
                                ->execute();
                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['awaiting-allocation']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['awaiting-allocation']);
            }


        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Please select any device',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['awaiting-allocation']);
        }


    }
    public function actionReleasedToTagger()
    {

        $action = Yii::$app->request->post('action');
        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {


            // Move to awaiting storage

            if ($action == 0) {
                $total = 0;
                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::released])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');

                            Devices::updateAll([
                                'received_from' => Devices::released,
                                // 'border_port' => $e['border_port'],
                                //'received_status' => StockDevices::available,
                                'created_at' => $datetime,
                                'created_by' => Yii::$app->user->identity->id,
                                'view_status' => Devices::awaiting_store,
                                'movement_unique_id' => $movementID,
                                'transferred_from' => null,
                                'transferred_to' => null,
                                'transferred_date' => null,
                                'transferred_by' => null,
                                'sale_id' => null,
                                'tzl' => null,
                                'vehicle_no' => null,
                                'container_number' => null,
                                'sales_person' => null,
                            ], ['serial_no' => $e['serial_no']]);


                            Yii::$app->db->createCommand()
                                ->upsert(
                                    'devices_reports',
                                    [
                                        'serial_no' => $e['serial_no'],
                                        'received_from' => Devices::awaiting_allocation,
                                        'received_to' => Devices::awaiting_store,
                                        'type' => $e['type'],
                                        'device_category' => $e['device_category'],
                                        'branch' => $e['branch'],
                                        'created_by' => Yii::$app->user->identity->id,
                                        'created_at' => $datetime,
                                        'movement_unique_id' => $movementID,
                                    ],
                                    false
                                )
                                ->execute();
                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['released']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['released']);
            }

            //move to Specific tagger
            else {
                $total = 0;


                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::released])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');


                            $releaseDate=$e['released_date'];

                            $time = new \DateTime('now');
                            $datetime2 = new \DateTime($releaseDate);
                            $interval = $time->diff($datetime2)->days;

                            if ( $interval > 2 ){

                                Yii::$app->session->setFlash('', [
                                    'type' => 'danger',
                                    'duration' => 5000,
                                    'icon' => 'fa fa-check',
                                    'message' => 'Device with more than 2 days cannot be transferred to tagger',
                                    'positonY' => 'top',
                                    'positonX' => 'right',
                                ]);

                                return $this->redirect(['released']);
                            }
                            else {

                                Devices::updateAll([
                                    'received_from' => Devices::released,
                                    // 'border_port' => $e['border_port'],
                                    //'received_status' => StockDevices::available,
                                    'released_by' => Yii::$app->user->identity->id,
                                    'released_to' => $action,
                                   // 'created_at' => $datetime,
                                   // 'created_by' => Yii::$app->user->identity->id,
                                    // 'received_at' => $datetime,
                                    // 'released_date' => $datetime,
                                    // 'received_by' => Yii::$app->user->identity->id,
                                    //'view_status' => Devices::released,
                                    'movement_unique_id' => $movementID,
                                    'transferred_from' => $e['released_to'],
                                    'transferred_to' => $action,
                                    'transferred_date' => $datetime,
                                    'transferred_by' =>  Yii::$app->user->identity->id,
                                ], ['serial_no' => $e['serial_no']]);


                                Yii::$app->db->createCommand()
                                    ->upsert(
                                        'devices_reports',
                                        [
                                            'serial_no' => $e['serial_no'],
                                            'received_from' => Devices::released,
                                            // 'received_to' => Devices::released,
                                            'type' => $e['type'],
                                            'device_category' => $e['device_category'],
                                            'branch' => $e['branch'],
                                            'created_by' => Yii::$app->user->identity->id,
                                            'created_at' => $datetime,
                                            'movement_unique_id' => $movementID,
                                            'released_by' => Yii::$app->user->identity->id,
                                            'released_to' => $action,
                                            'transferred_from' => $e['released_to'],
                                            'transferred_to' => $action,
                                            'transferred_date' => $datetime,
                                            'transferred_by' =>  Yii::$app->user->identity->id,
                                        ],
                                        false
                                    )
                                    ->execute();

                            }


                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['released']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['released']);
            }


        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Please select any device',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['released']);
        }


    }


    public function actionOnroadToBorderReturn()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {

            $total = 0;
            foreach ($selection as $key => $value) {

                try {
                    $e = Devices::find()
                        // ->select(['serial_no'])
                        ->where(['id' => $value])
                        ->andWhere(['view_status' => Devices::on_road])
                        ->one();

                    if ($e) {

                        $total = $key + 1;

                        $datetime = date('Y-m-d H:i:s');

                        Devices::updateAll([
                            'received_from' => Devices::on_road,
                            // 'border_port' => $e['border_port'],
                            //'received_status' => StockDevices::available,
                            'created_at' => $datetime,
                            'created_by' => Yii::$app->user->identity->id,
                            'view_status' => Devices::return_to_office,
                            'movement_unique_id' => $movementID,
                        ], ['serial_no' => $e['serial_no']]);


                        Yii::$app->db->createCommand()
                            ->upsert(
                                'devices_reports',
                                [
                                    'serial_no' => $e['serial_no'],
                                    'received_from' => Devices::on_road,
                                    'received_to' => Devices::return_to_office,
                                    'type' => $e['type'],
                                    'device_category' => $e['device_category'],
                                    'branch' => $e['branch'],
                                    'created_by' => Yii::$app->user->identity->id,
                                    'created_at' => $datetime,
                                    'movement_unique_id' => $movementID,
                                ],
                                false
                            )
                            ->execute();
                    }


                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Failed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['border-return']);
                }

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . $total . ' have been  successfully processed',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['border-return']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['border-return']);
        }


    }
    public function actionBorderReturnToAwaitStorage()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {

            $total = 0;
            foreach ($selection as $key => $value) {

                try {
                    $e = Devices::find()
                        // ->select(['serial_no'])
                        ->where(['id' => $value])
                        ->andWhere(['view_status' => Devices::return_to_office])
                        ->one();

                    if ($e) {

                        $total = $key + 1;

                        $datetime = date('Y-m-d H:i:s');

                        Devices::updateAll([
                            'received_from' => Devices::return_to_office,
                            // 'border_port' => $e['border_port'],
                            //'received_status' => StockDevices::available,
                            'created_at' => $datetime,
                            'created_by' => Yii::$app->user->identity->id,
                            'view_status' => Devices::awaiting_store,
                            'movement_unique_id' => $movementID,
                        ], ['serial_no' => $e['serial_no']]);


                        Yii::$app->db->createCommand()
                            ->upsert(
                                'devices_reports',
                                [
                                    'serial_no' => $e['serial_no'],
                                    'received_from' => Devices::return_to_office,
                                    'received_to' => Devices::awaiting_store,
                                    'type' => $e['type'],
                                    'device_category' => $e['device_category'],
                                    'branch' => $e['branch'],
                                    'created_by' => Yii::$app->user->identity->id,
                                    'created_at' => $datetime,
                                    'movement_unique_id' => $movementID,
                                ],
                                false
                            )
                            ->execute();
                    }


                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Failed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['border-return']);
                }

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . $total . ' have been  successfully processed',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['border-return']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['border-return']);
        }


    }
    public function actionIntransitToAwaitStorage()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {

            $total = 0;
            foreach ($selection as $key => $value) {

                try {
                    $e = Devices::find()
                        // ->select(['serial_no'])
                        ->where(['id' => $value])
                        ->andWhere(['view_status' => Devices::in_transit])
                        ->one();

                    if ($e) {

                        $total = $key + 1;

                        $datetime = date('Y-m-d H:i:s');

                        Devices::updateAll([
                            'received_from' => Devices::in_transit,
                            // 'border_port' => $e['border_port'],
                            //'received_status' => StockDevices::available,
                            'created_at' => $datetime,
                            'created_by' => Yii::$app->user->identity->id,
                            'view_status' => Devices::awaiting_store,
                            'movement_unique_id' => $movementID,
                        ], ['serial_no' => $e['serial_no']]);


                        Yii::$app->db->createCommand()
                            ->upsert(
                                'devices_reports',
                                [
                                    'serial_no' => $e['serial_no'],
                                    'received_from' => Devices::in_transit,
                                    'received_to' => Devices::awaiting_store,
                                    'type' => $e['type'],
                                    'device_category' => $e['device_category'],
                                    'branch' => $e['branch'],
                                    'created_by' => Yii::$app->user->identity->id,
                                    'created_at' => $datetime,
                                    'movement_unique_id' => $movementID,
                                ],
                                false
                            )
                            ->execute();
                    }


                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Failed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['border-return']);
                }

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . $total . ' have been  successfully processed',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['border-return']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['border-return']);
        }


    }
    public function actionFaultToAwaitStorage()
    {

        $action = Yii::$app->request->post('action');


        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {


            // Move to await Storage

            if ($action == 1) {
                $total = 0;
                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::fault_devices])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');

                            Devices::updateAll([
                                'received_from' => Devices::fault_devices,
                                // 'border_port' => $e['border_port'],
                                //'received_status' => StockDevices::available,
                                'created_at' => $datetime,
                                'created_by' => Yii::$app->user->identity->id,
                                'view_status' => Devices::store,
                                'movement_unique_id' => $movementID,
                            ], ['serial_no' => $e['serial_no']]);


                            Yii::$app->db->createCommand()
                                ->upsert(
                                    'devices_reports',
                                    [
                                        'serial_no' => $e['serial_no'],
                                        'received_from' => Devices::fault_devices,
                                        'received_to' => Devices::awaiting_store,
                                        'type' => $e['type'],
                                        'device_category' => $e['device_category'],
                                        'branch' => $e['branch'],
                                        'created_by' => Yii::$app->user->identity->id,
                                        'created_at' => $datetime,
                                        'movement_unique_id' => $movementID,
                                    ],
                                    false
                                )
                                ->execute();
                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['fault']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['fault']);
            } //move to damaged
            elseif ($action == 2) {
                $total = 0;
                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::fault_devices])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');

                            Devices::updateAll([
                                'received_from' => Devices::fault_devices,
                                // 'border_port' => $e['border_port'],
                                //'received_status' => StockDevices::available,
                                'created_at' => $datetime,
                                'created_by' => Yii::$app->user->identity->id,
                                'view_status' => Devices::damaged,
                                'movement_unique_id' => $movementID,
                            ], ['serial_no' => $e['serial_no']]);


                            Yii::$app->db->createCommand()
                                ->upsert(
                                    'devices_reports',
                                    [
                                        'serial_no' => $e['serial_no'],
                                        'received_from' => Devices::fault_devices,
                                        'received_to' => Devices::damaged,
                                        'type' => $e['type'],
                                        'device_category' => $e['device_category'],
                                        'branch' => $e['branch'],
                                        'created_by' => Yii::$app->user->identity->id,
                                        'created_at' => $datetime,
                                        'movement_unique_id' => $movementID,
                                    ],
                                    false
                                )
                                ->execute();
                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['fault']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['fault']);
            } //move to intransit
            elseif ($action == 3) {

                $total = 0;
                foreach ($selection as $key => $value) {

                    try {
                        $e = Devices::find()
                            // ->select(['serial_no'])
                            ->where(['id' => $value])
                            ->andWhere(['view_status' => Devices::awaiting_store])
                            ->one();

                        if ($e) {

                            $total = $key + 1;

                            $datetime = date('Y-m-d H:i:s');

                            Devices::updateAll([
                                'received_from' => Devices::awaiting_store,
                                // 'border_port' => $e['border_port'],
                                //'received_status' => StockDevices::available,
                                'created_at' => $datetime,
                                'created_by' => Yii::$app->user->identity->id,
                                'view_status' => Devices::in_transit,
                                'movement_unique_id' => $movementID,
                            ], ['serial_no' => $e['serial_no']]);


                            Yii::$app->db->createCommand()
                                ->upsert(
                                    'devices_reports',
                                    [
                                        'serial_no' => $e['serial_no'],
                                        'received_from' => Devices::awaiting_store,
                                        'received_to' => Devices::in_transit,
                                        'type' => $e['type'],
                                        'device_category' => $e['device_category'],
                                        'branch' => $e['branch'],
                                        'created_by' => Yii::$app->user->identity->id,
                                        'created_at' => $datetime,
                                        'movement_unique_id' => $movementID,
                                    ],
                                    false
                                )
                                ->execute();
                        }


                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Failed',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['fault']);
                    }

                }


                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . $total . ' have been  successfully processed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['fault']);
            } else {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Please select moving point',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);
                return $this->redirect(['fault']);
            }


        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Please select any device',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['fault']);
        }


    }

    public function actionDamagedToAwaitStorage()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        $movementID = strtoupper(Yii::$app->security->generateRandomString());

        if ($selection) {

            $total = 0;
            foreach ($selection as $key => $value) {

                try {
                    $e = Devices::find()
                        // ->select(['serial_no'])
                        ->where(['id' => $value])
                        ->andWhere(['view_status' => Devices::damaged])
                        ->one();

                    if ($e) {

                        $total = $key + 1;

                        $datetime = date('Y-m-d H:i:s');

                        Devices::updateAll([
                            'received_from' => Devices::damaged,
                            // 'border_port' => $e['border_port'],
                            //'received_status' => StockDevices::available,
                            'created_at' => $datetime,
                            'created_by' => Yii::$app->user->identity->id,
                            'view_status' => Devices::awaiting_store,
                            'movement_unique_id' => $movementID,
                        ], ['serial_no' => $e['serial_no']]);


                        Yii::$app->db->createCommand()
                            ->upsert(
                                'devices_reports',
                                [
                                    'serial_no' => $e['serial_no'],
                                    'received_from' => Devices::damaged,
                                    'received_to' => Devices::awaiting_store,
                                    'type' => $e['type'],
                                    'device_category' => $e['device_category'],
                                    'branch' => $e['branch'],
                                    'created_by' => Yii::$app->user->identity->id,
                                    'created_at' => $datetime,
                                    'movement_unique_id' => $movementID,
                                ],
                                false
                            )
                            ->execute();
                    }


                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Failed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['damaged']);
                }

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . $total . ' have been  successfully processed',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['damaged']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['damaged']);
        }


    }


    public function actionReceived()
    {
        if (!Yii::$app->user->isGuest) {
            $searchModel = new DevicesSearch();
            $dataProvider = $searchModel->searchReceived(Yii::$app->request->queryParams);

            return $this->render('received', [
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]);
        } else {
            $model = new LoginForm();
            return $this->redirect(['site/login',
                'model' => $model,
            ]);
        }

    }


    public function actionSearchReceive()
    {
        if (!Yii::$app->user->isGuest) {
            $searchModel = new DevicesSearch();
            $dataProvider = $searchModel->searchReceive(Yii::$app->request->queryParams);

            return $this->render('received', [
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]);
        } else {
            $model = new LoginForm();
            return $this->redirect(['site/login',
                'model' => $model,
            ]);
        }

    }


    public function actionStoreAction()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        // print_r($selection);
        // die;

        //  $e = ReceivedDevices::findOne((int)$id);


        if ($action == 1) {
            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();

                Devices::updateAll(['status' => StockDevices::available,
                    'created_by' => Yii::$app->user->identity->id,
                    'view_status' => Devices::stock_devices,
                    'border_port' => $e['border_port'],
                    'received_from' => $e['received_from'],
                    'created_at' => date('Y-m-d H:i:s')], ['serial_no' => $e['serial_no']]);

                Yii::$app->db->createCommand()
                    ->upsert(
                        'stock_devices_report',
                        [
                            'serial_no' => $e['serial_no'],
                            'status' => StockDevices::available,
                            'branch' => $e['branch'],
                            'created_by' => Yii::$app->user->identity->id,
                            'location_from' => $e['border_port'],
                            'created_at' => date('Y-m-d H:i:s'),
                        ],
                        false
                    )
                    ->execute();
            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully allocated as available',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['received']);

        } elseif ($action == 2) {
            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();

                Devices::updateAll(['status' => StockDevices::available,
                    'created_by' => Yii::$app->user->identity->id,
                    'view_status' => Devices::stock_devices,
                    'border_port' => $e['border_port'],
                    'received_from' => $e['received_from'],
                    'created_at' => date('Y-m-d H:i:s')], ['serial_no' => $e['serial_no']]);

                $stock = new StockDevicesReport();
                $stock->serial_no = $e['serial_no'];
                $stock->status = StockDevices::not_deactivated;
                $stock->location_from = $e['border_port'];
                // $stock->remarks='';
                $stock->created_by = Yii::$app->user->identity->id;
                $stock->created_at = date('Y-m-d H:i:s');
                $stock->save();

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully allocated as available',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['received']);

        } elseif ($action == 3) {

            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();

                Devices::updateAll(['status' => StockDevices::available,
                    'created_by' => Yii::$app->user->identity->id,
                    'view_status' => Devices::fault_devices,
                    'border_port' => $e['border_port'],
                    'received_from' => $e['received_from'],
                    'created_at' => date('Y-m-d H:i:s')], ['serial_no' => $e['serial_no']]);


                $fault = new FaultDevicesReport();
                $fault->serial_no = $e['serial_no'];
                $fault->status = FaultDevices::fault_device;
                $fault->created_by = Yii::$app->user->identity->id;
                $fault->branch = $e['branch'];
                $fault->created_at = date('Y-m-d H:i:s');
                $fault->save(false);

            }

            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully sent for maintenance',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['received']);
        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['received']);
        }


    }


    public function actionIntransit()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchIntransit(Yii::$app->request->queryParams);

        return $this->render('intransit', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSearchIntransit()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchIntransitResults(Yii::$app->request->queryParams);

        return $this->render('intransit', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionDamaged()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchDamaged(Yii::$app->request->queryParams);

        return $this->render('damaged', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionDamagedSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->DamagedSearchresults(Yii::$app->request->queryParams);

        return $this->render('damaged', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }




    public function actionAvailable()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAvailable(Yii::$app->request->queryParams);

        return $this->render('available', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionSearchAvailable()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->available(Yii::$app->request->queryParams);

        return $this->render('awaiting-allocation', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionAvailableReversed()
    {
        $selection = (array)Yii::$app->request->post('selection');
        foreach ($selection as $key => $value) {
            $e = Devices::find()->where(['id' => $value])->one();
            try {
                Devices::updateAll([
                    'received_from' => 0,
                    'border_port' => $e['border_port'],
                    'received_from_staff' => null,
                    'received_status' => 1,
                    'remark' => null,
                    'received_at' => date('Y-m-d H:i:s'),
                    'received_by' => Yii::$app->user->identity->id,
                    'view_status' => Devices::received_devices,
                ], ['serial_no' => $e['serial_no']]);


                Yii::$app->db->createCommand()
                    ->upsert(
                        'received_devices_report',
                        [
                            'serial_no' => $e['serial_no'],
                            'received_from' => 0,
                            'border_port' => $e['border_port'],
                            'received_from_staff' => '',
                            'received_status' => 1,
                            'remark' => null,
                            'received_at' => date('Y-m-d H:i:s'),
                            'received_by' => Yii::$app->user->identity->id,
                        ],
                        false
                    )
                    ->execute();

            } catch (Exception $e) {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-warning',
                    'message' => 'Fail',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['available']);
            }

        }

        Yii::$app->session->setFlash('', [
            'type' => 'success',
            'duration' => 5000,
            'icon' => 'fa fa-check',
            'message' => 'Total device ' . count($selection) . ' have been  successfully reversed to received status',
            'positonY' => 'top',
            'positonX' => 'right',
        ]);

        return $this->redirect(['available']);


    }


    public function actionReleased()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->released(Yii::$app->request->queryParams);

        return $this->render('released', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionReleasedSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->releasedSearch(Yii::$app->request->queryParams);

        return $this->render('released', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionReturn()
    {

        $date = date('Y-m-d', strtotime('-2 days'));
        $released = Devices::find()
            ->where(['date(released_date)' => $date])
            ->andWhere(['view_status' => Devices::released_devices])
            ->all();

        foreach ($released as $release) {

            $data = Devices::find()->where(['id' => $release->id])
                ->andWhere(['view_status' => Devices::released_devices])->one();
            Devices::updateAll([
                'received_from' => 2,
                'border_port' => $data['sales_point'],
                'received_from_staff' => $data['released_to'],
                'received_status' => 1,
                'remark' => 'AUTOMATIC RETURN TO OFFICE AFTER 24 HOURS',
                'received_at' => date('Y-m-d H:i:s'),
                'received_by' => $data['released_to'],
                'view_status' => Devices::awaiting_receive,
            ], ['serial_no' => $data['serial_no']]);

            $report = new AwaitingReceiveReport();
            $report->serial_no = $data['serial_no'];
            $report->received_from = 2;
            $report->border_port = $data['sales_point'];
            $report->received_from_staff = $data['released_to'];
            $report->received_at = date('Y-m-d H:i:s');
            $report->received_status = 1;
            $report->remark = 'AUTOMATIC RETURN TO OFFICE AFTER 24 HOURS';
            $report->received_by = $data['released_to'];


        }

    }

    public function actionTransfer()
    {

        if (Yii::$app->user->can('transferDevices')) {
            $action = Yii::$app->request->post('action');
            $points = Yii::$app->request->post('points');

            $selection = (array)Yii::$app->request->post('selection');

            if ($selection != '') {

                if ($action != '' && $points != '') {

                    $saler = Devices::find()->where(['id' => $selection])->one();
                    foreach ($selection as $key => $value) {

                        $report = Devices::find()->where(['id' => $value])->one();


                        Devices::updateAll(['transferred_from' => $saler['released_to'],
                            'transferred_by' => Yii::$app->user->identity->id, 'released_to' => $action,
                            'transferred_to' => $action, 'transferred_date' => date('Y-m-d H:i:s'),
                            'status' => 2, 'border_port' => $points],
                            ['serial_no' => $report['serial_no'], 'released_to' => $report['released_to']]);


                        $stock = new TransferDevicesReport();
                        $stock->serial_no = $report['serial_no'];
                        $stock->transferred_from = $saler['released_to'];
                        $stock->transferred_by = Yii::$app->user->identity->id;
                        $stock->branch = $report['branch'];
                        $stock->transferred_date = date('Y-m-d H:i:s');
                        $stock->released_date = date('Y-m-d H:i:s');
                        $stock->sales_point = $points;
                        $stock->status = Devices::released_devices;
                        $stock->transferred_to = $action;
                        // $stock->released_date = date('Y-m-d H:i:s');
                        $stock->save(false);


                    }

                    Yii::$app->session->setFlash('', [
                        'type' => 'success',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Total device ' . count($selection) . ' have been  successfully transferred',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['released']);

                }

                //RETURN TO WEB OFFICE==42 AND RETURN TO EBETTER OFFER==71

                if ($action == 42 || $action == 71) {

                    foreach ($selection as $key => $value) {

                        $data = Devices::find()->where(['id' => $value])->one();

                        Devices::updateAll([
                            'received_from' => 2,
                            'border_port' => $data['border_port'],
                            'received_from_staff' => $data['released_to'],
                            'received_at' => date('Y-m-d H:i:s'),
                            'received_status' => 1,
                            'received_by' => Yii::$app->user->identity->getId(),
                            'view_status' => Devices::awaiting_receive,
                        ], ['serial_no' => $data['serial_no']]);


                        $report = new AwaitingReceiveReport();
                        $report->serial_no = $data['serial_no'];
                        $report->received_from = 2;
                        $report->border_port = $data['border_port'];
                        $report->received_from_staff = $data['released_to'];
                        $report->received_at = date('Y-m-d H:i:s');
                        $report->received_status = 1;
                        $report->received_by = Yii::$app->user->identity->getId();
                        $report->save();


                    }
                    Yii::$app->session->setFlash('', [
                        'type' => 'success',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Total device ' . count($selection) . ' have been  successfully transferred',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['released']);

                } else {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'You have not selected Sales Person or Sales Point ',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);
                    return $this->redirect(['released']);
                }
            } else {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Please select devices to transfer ',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);
                return $this->redirect(['released']);
            }

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You do not have permission to transfer device',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['released']);
        }
    }


    public function actionOnRoad()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->onRoad(Yii::$app->request->queryParams);

        return $this->render('road', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionOnRoad1to7()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->onRoad1to7(Yii::$app->request->queryParams);

        return $this->render('road', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }
    public function actionOnRoad8to14()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->onRoad8to14(Yii::$app->request->queryParams);

        return $this->render('road', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionOnRoadAbove14()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->onRoadAbove14(Yii::$app->request->queryParams);

        return $this->render('road', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }
    public function actionOnRoadMoreThanDays()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->onRoadAbove7days(Yii::$app->request->queryParams);

        return $this->render('road', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }
    public function actionIntransitMoreThanDays()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->intransitAbove3(Yii::$app->request->queryParams);

        return $this->render('intransit', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionBorderReturn()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchBorderReturn(Yii::$app->request->queryParams);

        return $this->render('border_return', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionBorderReceived()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchBorderReceived(Yii::$app->request->queryParams);

        return $this->render('border_received', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSearchBorderReceived()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchBorderReceivedResults(Yii::$app->request->queryParams);

        return $this->render('border_received', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSearchBorderReturn()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchBorderReturnResults(Yii::$app->request->queryParams);

        return $this->render('border_return', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSearchRoad()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchRoad(Yii::$app->request->queryParams);

        return $this->render('road', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionConfirm()
    {

        if (Yii::$app->user->can('confirmReceived')) {

            $selection = (array)Yii::$app->request->post('selection');

            if ($selection != '') {
                foreach ($selection as $key => $value) {
                    $e = Devices::find()->where(['id' => $value])->one();

                    Devices::updateAll([
                        'received_from' => BorderPort::Border,
                        'border_port' => $e['border_port'],
                        'sale_id' => $e['sale_id'],
                        'received_from_staff' => $e['created_by'],
                        'received_status' => StockDevices::available,
                        'received_at' => date('Y-m-d H:i:s'),
                        'received_by' => Yii::$app->user->identity->id,
                        'view_status' => Devices::awaiting_receive,
                        'remark' => null,
                    ], ['serial_no' => $e['serial_no']]);

                    $awaiting = new AwaitingReceiveReport();
                    $awaiting->serial_no = $e['serial_no'];
                    $awaiting->received_from = BorderPort::Border;
                    $awaiting->border_port = $e['border_port'];
                    $awaiting->received_from_staff = $e['created_by'];
                    $awaiting->received_status = StockDevices::available;
                    $awaiting->received_by = Yii::$app->user->identity->id;
                    $awaiting->received_at = date('Y-m-d H:i:s');
                    $awaiting->save();
                }

                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . count($selection) . ' have been  confirmed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['on-road']);
            } else {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'No devices selected',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['on-road']);
            }


        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-warning',
                'message' => 'You dont have a permission',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['index']);
        }

    }

    public function actionFault()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->Fault(Yii::$app->request->queryParams);

        return $this->render('fault', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionFaultSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->FaultSearch(Yii::$app->request->queryParams);

        return $this->render('fault', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionAwait()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        if ($action != '') {

            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();


                Devices::updateAll(['status' => StockDevices::available,
                    'created_by' => Yii::$app->user->identity->id,
                    // 'location_from'=>$e['border_port'],
                    'view_status' => Devices::awaiting_receive,
                    'created_at' => date('Y-m-d H:i:s')], ['id' => $value]);

                $stock = new StockDevicesReport();
                $stock->serial_no = $e['serial_no'];
                $stock->status = StockDevices::available;
                $stock->created_by = Yii::$app->user->identity->id;
                $stock->created_at = date('Y-m-d H:m');
                $stock->save();


            }

            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully allocated as available',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['fault']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected Sales Person ',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['fault']);
        }


    }

    /**
     * Displays a single Devices model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Devices model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {

        if (!Yii::$app->user->isGuest) {
            $model = new Devices();

            if (Yii::$app->user->can('addDevices')) {

                if ($model->load(Yii::$app->request->post())) {

                    try {
                        $createdBY = $model->created_by = Yii::$app->user->identity->id;
                        $serial = $model->serial_no;
                        $status = $model->status;
                        $branch = $model->branch;
                        $type = $model->type;
                        $timeCreated = $model->created_at = date('Y-m-d H:i:s');
                        $received_from = $model->received_from;
                        $border = $model->border_port;
                        $staff = $model->received_from_staff;
                        $remark = $model->remark;
                        $partner = $model->partiner;
                        $category = $model->device_category;
                        $line_data = preg_split("/\\r\\n|\\r|\\n/", $serial);
                        foreach ($line_data as $key => $value) {

                            $checkSerial = Devices::findOne(['serial_no' => $value]);
                            if (empty($checkSerial)) {
                                $model = new Devices();
                                $model->serial_no = $value;
                                $model->received_from = $received_from;
                                $model->device_from = $received_from;
                                $model->device_category = $category;
                                $model->partiner = $partner;
                                $model->border_port = $border;
                                $model->stock_status = $border;
                                $model->created_at = $timeCreated;
                                $model->created_by = $createdBY;
                                $model->status = $status;
                                $model->branch = $branch;
                                $model->type = $type;
                                $model->remark = $remark;
                                $model->save();

                                Devices::updateAll(['view_status' => Devices::awaiting_receive], ['serial_no' => $value]);
                            }

                        }
                        $data = count($line_data);
                        Yii::$app->session->setFlash('', [
                            'type' => 'success',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Total device ' . $data . ' have been  registered successfully',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);
                        return $this->redirect(['index']);
                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Fail, there is an error occured',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);
                        return $this->redirect(['index']);
                    }
                }

                return $this->render('create', [
                    'model' => $model,
                ]);

            } else {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-warning',
                    'message' => 'You dont have a permission',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['index']);
            }
        } else {
            $model = new LoginForm();
            return $this->redirect(['site/login',
                'model' => $model,
            ]);
        }

    }

    /**
     * Updates an existing Devices model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionActivate($id)
    {
        $model = $this->findModel($id);
        $model->view_status = Devices::awaiting_receive;
        $model->save();
        Yii::$app->session->setFlash('', [
            'type' => 'success',
            'duration' => 5000,
            'icon' => 'fa fa-warning',
            'message' => 'Device successfully moved to awaiting receive',
            'positonY' => 'top',
            'positonX' => 'right',
        ]);
        return $this->redirect(['index']);

    }

    /**
     * Deletes an existing Devices model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        // $this->findModel($id)->delete();

        //  return $this->redirect(['index']);
    }

    /**
     * Finds the Devices model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Devices the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Devices::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
