<?php

namespace frontend\controllers;

use common\models\LoginForm;
use frontend\models\AwaitingReceive;
use frontend\models\AwaitingReceiveReport;
use frontend\models\BorderPort;
use frontend\models\FaultDevices;
use frontend\models\FaultDevicesReport;
use frontend\models\ReceivedDevicesReport;
use frontend\models\ReleasedDevicesReport;
use frontend\models\StockDevices;
use frontend\models\StockDevicesReport;
use frontend\models\TransferDevicesReport;
use http\Exception;
use Yii;
use frontend\models\Devices;
use frontend\models\DevicesSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * DevicesController implements the CRUD actions for Devices model.
 */
class DevicesController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest) {
            return $this->redirect(['site/login'])->send();  // login path
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    /**
     * Lists all Devices models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionCurrentStatus()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('current', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionIndexSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchIndex(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSearchAwait()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAwait(Yii::$app->request->queryParams);

        return $this->render('await_receive', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionAwaitingReceive()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAwaitReceive(Yii::$app->request->queryParams);

        return $this->render('await_receive', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionReceive()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');


        //  $e = ReceivedDevices::findOne((int)$id);


        if ($action == 1) {
            foreach ($selection as $key => $value) {

                try {
                    $e = Devices::find()->where(['id' => $value])->one();


                    Devices::updateAll([
                        'received_from' => BorderPort::Border,
                        'border_port' => $e['border_port'],
                        'received_status' => StockDevices::available,
                        'received_at' => date('Y-m-d H:i:s'),
                        'received_by' => Yii::$app->user->identity->id,
                        'view_status' => Devices::received_devices,
                    ], ['serial_no' => $e['serial_no']]);

                    //   Devices::updateAll(['view_status'=>Devices::received_devices,'remark'=>null],['serial_no'=>$e['serial_no']]);


                    $stock = new ReceivedDevicesReport();
                    $stock->serial_no = $e['serial_no'];
                    $stock->received_status = StockDevices::available;
                    $stock->received_by = Yii::$app->user->identity->id;
                    $stock->received_from = $e['received_from'];
                    $stock->border_port = $e['border_port'];
                    $stock->branch = $e['branch'];
                    $stock->received_at = date('Y-m-d H:i:s');
                    $stock->save();

                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Failed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['awaiting-receive']);
                }

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully received',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['awaiting-receive']);

        } elseif ($action == 2) {
            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();

                Devices::updateAll(['status' => StockDevices::not_deactivated,
                    'created_by' => Yii::$app->user->identity->id,
                    'border_port' => $e['border_port'],
                    'view_status' => Devices::stock_devices,
                    'created_at' => date('Y-m-d H:i:s')], ['serial_no' => $e['serial_no']]);



                $stock = new StockDevicesReport();
                $stock->serial_no = $e['serial_no'];
                $stock->status = StockDevices::not_deactivated;
                $stock->location_from = $e['border_port'];
                $stock->branch = $e['branch'];
                $stock->created_by = Yii::$app->user->identity->id;
                $stock->created_at = date('Y-m-d H:i:s');
                $stock->save();

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully allocated as available',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['awaiting-receive']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['awaiting-receive']);
        }


    }


    public function actionReceived()
    {
        if (!Yii::$app->user->isGuest) {
            $searchModel = new DevicesSearch();
            $dataProvider = $searchModel->searchReceived(Yii::$app->request->queryParams);

            return $this->render('received', [
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]);
        } else {
            $model = new LoginForm();
            return $this->redirect(['site/login',
                'model' => $model,
            ]);
        }

    }


    public function actionSearchReceive()
    {
        if (!Yii::$app->user->isGuest) {
            $searchModel = new DevicesSearch();
            $dataProvider = $searchModel->searchReceive(Yii::$app->request->queryParams);

            return $this->render('received', [
                'searchModel' => $searchModel,
                'dataProvider' => $dataProvider,
            ]);
        } else {
            $model = new LoginForm();
            return $this->redirect(['site/login',
                'model' => $model,
            ]);
        }

    }


    public function actionStore()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');

        // print_r($selection);
        // die;

        //  $e = ReceivedDevices::findOne((int)$id);


        if ($action == 1) {
            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();

                Devices::updateAll(['status' => StockDevices::available,
                    'created_by' => Yii::$app->user->identity->id,
                    'view_status' => Devices::stock_devices,
                    'border_port' => $e['border_port'],
                    'received_from' => $e['received_from'],
                    'created_at' => date('Y-m-d H:i:s')], ['serial_no' => $e['serial_no']]);

                Yii::$app->db->createCommand()
                    ->upsert(
                        'stock_devices_report',
                        [
                            'serial_no' => $e['serial_no'],
                            'status' => Devices::stock_devices,
                            'branch' => $e['branch'],
                            'created_by' => Yii::$app->user->identity->id,
                            'location_from' => $e['border_port'],
                            'created_at' => date('Y-m-d H:i:s'),
                        ],
                        false
                    )
                    ->execute();
            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully allocated as available',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['received']);

        } elseif ($action == 2) {
            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();

                Devices::updateAll(['status' => StockDevices::not_deactivated,
                    'created_by' => Yii::$app->user->identity->id,
                    'view_status' => Devices::stock_devices,
                    'border_port' => $e['border_port'],
                    'received_from' => $e['received_from'],
                    'created_at' => date('Y-m-d H:i:s')], ['serial_no' => $e['serial_no']]);

                $stock = new StockDevicesReport();
                $stock->serial_no = $e['serial_no'];
                $stock->status = Devices::stock_devices;
                $stock->location_from = $e['border_port'];
                $stock->branch = $e['branch'];
                // $stock->remarks='';
                $stock->created_by = Yii::$app->user->identity->id;
                $stock->created_at = date('Y-m-d H:i:s');
                $stock->save();

            }


            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully allocated as available',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['received']);

        } elseif ($action == 3) {

            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();

                Devices::updateAll(['status' => StockDevices::available,
                    'created_by' => Yii::$app->user->identity->id,
                    'view_status' => Devices::fault_devices,
                    'border_port' => $e['border_port'],
                    'received_from' => $e['received_from'],
                    'created_at' => date('Y-m-d H:i:s')], ['serial_no' => $e['serial_no']]);


                $fault = new FaultDevicesReport();
                $fault->serial_no = $e['serial_no'];
                $fault->status = FaultDevices::fault_device;
                $fault->created_by = Yii::$app->user->identity->id;
                $fault->branch = $e['branch'];
                $fault->created_at = date('Y-m-d H:i:s');
                $fault->save(false);

            }

            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully sent for maintenance',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['received']);
        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected allocation point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['received']);
        }


    }


    public function actionIntransit()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchIntransit(Yii::$app->request->queryParams);

        return $this->render('intransit', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSearchIntransit()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->Intransit(Yii::$app->request->queryParams);

        return $this->render('intransit', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionDeactivate()
    {

        if (Yii::$app->user->can('deactivateDevices')) {

            $selection = (array)Yii::$app->request->post('selection');

            if ($selection != '') {


                foreach ($selection as $key => $value) {
                    $e = Devices::find()->where(['id' => $value])->one();

                    Devices::updateAll(['view_status' => Devices::awaiting_receive], ['id' => $value]);

                    $stock = new AwaitingReceiveReport();
                    $stock->serial_no = $e['serial_no'];
                    $stock->border_port = $e['border_port'];
                    $stock->received_from = BorderPort::Border;
                    $stock->branch =$e['branch'];
                    // $stock->view_status = Devices::awaiting_receive;
                    $stock->received_by = Yii::$app->user->identity->id;
                    $stock->received_at = date('Y-m-d H:i:s');
                    $stock->save();

                }

                Yii::$app->session->setFlash('', [
                    'type' => 'success',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'Total device ' . count($selection) . ' have been  confirmed',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['intransit']);
            } else {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-check',
                    'message' => 'No devices selected',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['intransit']);
            }


        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-warning',
                'message' => 'You dont have a permissions',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['intransit']);
        }


    }


    public function actionAvailable()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchAvailable(Yii::$app->request->queryParams);

        return $this->render('available', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionSearchAvailable()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->available(Yii::$app->request->queryParams);

        return $this->render('available', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public function actionAllocated()
    {

        $action = Yii::$app->request->post('action');

        $selection = (array)Yii::$app->request->post('selection');
        $points = Yii::$app->request->post('points');


        if ($action != '' && $points != '') {

            foreach ($selection as $key => $value) {
                $e = Devices::find()->where(['id' => $value])->one();
                try {

                    Devices::updateAll(['status' => StockDevices::available,
                        'released_by' => Yii::$app->user->identity->id,
                        'released_to' => $action,
                        'border_port' => $points,
                        'view_status' => Devices::released_devices,
                        'transferred_from' => null,
                        'transferred_to' => null,
                        'transferred_date' => null,
                        'transferred_by' => null,
                        'released_date' => date('Y-m-d H:i:s')], ['serial_no' => $e['serial_no']]);


                    $stock = new ReleasedDevicesReport();
                    $stock->serial_no = $e['serial_no'];
                    $stock->branch = $e['branch'];
                    $stock->released_to = $action;
                    $stock->sales_point = $points;
                    $stock->status = StockDevices::available;
                    $stock->released_by = Yii::$app->user->identity->id;
                    $stock->released_date = date('Y-m-d H:i:s');
                    $stock->save();


                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-warning',
                        'message' => 'Fail',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);


                    return $this->redirect(['available']);
                }

            }

            Yii::$app->session->setFlash('', [
                'type' => 'success',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'Total device ' . count($selection) . ' have been  successfully released',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['available']);

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You have not selected Sales Person or Sales Point',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['available']);
        }


    }


    public function actionAvailableReversed()
    {
        $selection = (array)Yii::$app->request->post('selection');
        foreach ($selection as $key => $value) {
            $e = Devices::find()->where(['id' => $value])->one();
            try {
                Devices::updateAll([
                    'received_from' => 0,
                    'border_port' => $e['border_port'],
                    'received_from_staff' =>null,
                    'received_status' => 1,
                    'remark' => null,
                    'received_at' => date('Y-m-d H:i:s'),
                    'received_by' => Yii::$app->user->identity->id,
                    'view_status' => Devices::received_devices,
                ], ['serial_no' => $e['serial_no']]);


                Yii::$app->db->createCommand()
                    ->upsert(
                        'received_devices_report',
                        [
                            'serial_no' => $e['serial_no'],
                            'received_from' => 0,
                            'border_port' => $e['border_port'],
                            'branch' => $e['branch'],
                            'received_from_staff' => '',
                            'received_status' => 1,
                            'remark' => null,
                            'received_at' => date('Y-m-d H:i:s'),
                            'received_by' => Yii::$app->user->identity->id,
                        ],
                        false
                    )
                    ->execute();

            } catch (Exception $e) {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-warning',
                    'message' => 'Fail',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['available']);
            }

        }

        Yii::$app->session->setFlash('', [
            'type' => 'success',
            'duration' => 5000,
            'icon' => 'fa fa-check',
            'message' => 'Total device ' . count($selection) . ' have been  successfully reversed to received status',
            'positonY' => 'top',
            'positonX' => 'right',
        ]);

        return $this->redirect(['available']);


    }


    public function actionReleased()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->released(Yii::$app->request->queryParams);

        return $this->render('released', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionReleasedSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->releasedSearch(Yii::$app->request->queryParams);

        return $this->render('released', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }


    public  function actionReturn(){

        $date =date('Y-m-d', strtotime('-2 days'));
        $released=Devices::find()
            ->where(['date(released_date)'=>$date])
            ->andWhere(['view_status'=>Devices::released_devices])
            ->all();

        foreach ($released as $release) {

            $data = Devices::find()->where(['id' =>$release->id])
                ->andWhere(['view_status'=>Devices::released_devices])->one();
            Devices::updateAll([
                'received_from' => 2,
                'border_port' => $data['sales_point'],
                'received_from_staff' => $data['released_to'],
                'received_status' => 1,
                'remark' => 'AUTOMATIC RETURN TO OFFICE AFTER 24 HOURS',
                'received_at' => date('Y-m-d H:i:s'),
                'received_by' =>  $data['released_to'],
                'view_status'=>Devices::awaiting_receive,
            ],['serial_no'=>$data['serial_no']]);

            $report = new AwaitingReceiveReport();
            $report->serial_no = $data['serial_no'];
            $report->received_from = 2;
            $report->border_port = $data['sales_point'];
            $report->branch = $data['branch'];
            $report->received_from_staff = $data['released_to'];
            $report->received_at = date('Y-m-d H:i:s');
            $report->received_status = 1;
            $report->remark = 'AUTOMATIC RETURN TO OFFICE AFTER 24 HOURS';
            $report->received_by = $data['released_to'];


        }

    }

    public function actionTransfer()
    {

        if (Yii::$app->user->can('transferDevices')) {
            $action = Yii::$app->request->post('action');
            $points = Yii::$app->request->post('points');

            $selection = (array)Yii::$app->request->post('selection');

                if ($selection != '') {

                    if ($action != '' && $points != '') {

                        $saler = Devices::find()->where(['id' => $selection])->one();
                        foreach ($selection as $key => $value) {

                            $report = Devices::find()->where(['id' => $value])->one();

                            Devices::updateAll(['transferred_from' => $saler['released_to'],
                                'transferred_by' => Yii::$app->user->identity->id, 'released_to' => $action,
                                'transferred_to' => $action, 'transferred_date' => date('Y-m-d H:i:s'),
                                'status' => 2, 'border_port' => $points,'released_date'=>$saler['released_date']],
                                ['serial_no'=>$report['serial_no'],'released_to'=>$report['released_to']]);


                            $stock = new TransferDevicesReport();
                            $stock->serial_no = $report['serial_no'];
                            $stock->transferred_from = $saler['released_to'];
                            $stock->transferred_by =  Yii::$app->user->identity->id;
                            $stock->branch = $report['branch'];
                            $stock->transferred_date = date('Y-m-d H:i:s');
                          //  $stock->released_to = $action;
                            $stock->sales_point = $points;
                            $stock->status = Devices::released_devices;
                            $stock->transferred_to = $action;
                            $stock->released_date = $saler['released_date'];
                            $stock->save(false);


                        }

                        Yii::$app->session->setFlash('', [
                            'type' => 'success',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Total device ' . count($selection) . ' have been  successfully transferred',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['released']);

                    }

                    //RETURN TO WEB OFFICE==42 AND RETURN TO EBETTER OFFER==71

                    if ($action == 42 || $action == 71) {

                        foreach ($selection as $key => $value) {

                            $data = Devices::find()->where(['id' => $value])->one();


                            Devices::updateAll([
                                'received_from' => 2,
                                'border_port' => $data['border_port'],
                                'received_from_staff' => $data['released_to'],
                                'received_at' => date('Y-m-d H:i:s'),
                                'received_status' => 1,
                                'released_date'=>$data['released_date'],
                                'received_by' => Yii::$app->user->identity->getId(),
                                'view_status' => Devices::awaiting_receive,
                            ], ['serial_no' => $data['serial_no']]);


                            $report = new AwaitingReceiveReport();
                            $report->serial_no = $data['serial_no'];
                            $report->received_from = 2;
                            $report->branch = $data['branch'];
                            $report->border_port = $data['border_port'];
                            $report->received_from_staff = $data['released_to'];
                            $report->received_at = date('Y-m-d H:i:s');
                            $report->received_status = 1;
                            $report->received_by = Yii::$app->user->identity->getId();
                            $report->save();


                        }
                        Yii::$app->session->setFlash('', [
                            'type' => 'success',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Total device ' . count($selection) . ' have been  successfully transferred',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);

                        return $this->redirect(['released']);

                    }
                    else {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'You have not selected Sales Person or Sales Point ',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);
                        return $this->redirect(['released']);
                    }
                } else {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Please select devices to transfer ',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);
                    return $this->redirect(['released']);
                }

        } else {
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-check',
                'message' => 'You do not have permission to transfer device',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);
            return $this->redirect(['released']);
        }
    }




    public function actionOnRoad()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->onRoad(Yii::$app->request->queryParams);

        return $this->render('road', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSearchRoad()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->searchRoad(Yii::$app->request->queryParams);

        return $this->render('road', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }
    public function actionConfirm(){

        if(Yii::$app->user->can('confirmReceived')){

            $selection=(array)Yii::$app->request->post('selection');

                if ($selection != ''){
                    foreach ($selection as $key => $value) {
                        $e = Devices::find()->where(['id'=>$value])->one();

                        Devices::updateAll([
                            'received_from' =>  BorderPort::Border,
                            'border_port' => $e['border_port'],
                            'sale_id' => $e['sale_id'],
                            'received_from_staff' =>  $e['created_by'],
                            'received_status' =>  StockDevices::available,
                            'received_at' => date('Y-m-d H:i:s'),
                            'received_by' => Yii::$app->user->identity->id,
                            'view_status'=>Devices::awaiting_receive,
                            'remark'=>null,
                        ],['serial_no'=>$e['serial_no']]);

                        $awaiting = new AwaitingReceiveReport();
                        $awaiting->serial_no = $e['serial_no'];
                        $awaiting->received_from = BorderPort::Border;
                        $awaiting->border_port = $e['border_port'];
                        $awaiting->branch = $e['branch'];
                        $awaiting->received_from_staff = $e['created_by'];
                        $awaiting->received_status = StockDevices::available;
                        $awaiting->received_by = Yii::$app->user->identity->id;
                        $awaiting->received_at = date('Y-m-d H:i:s');
                        $awaiting->save();
                    }

                    Yii::$app->session->setFlash('', [
                        'type' => 'success',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Total device '.count($selection).' have been  confirmed',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['on-road']);
                }
                else{
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'No devices selected',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['on-road']);
                }



        }else{
            Yii::$app->session->setFlash('', [
                'type' => 'danger',
                'duration' => 5000,
                'icon' => 'fa fa-warning',
                'message' => 'You dont have a permission',
                'positonY' => 'top',
                'positonX' => 'right',
            ]);

            return $this->redirect(['index']);
        }

    }

    public function actionFault()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->Fault(Yii::$app->request->queryParams);

        return $this->render('fault', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionFaultSearch()
    {
        $searchModel = new DevicesSearch();
        $dataProvider = $searchModel->FaultSearch(Yii::$app->request->queryParams);

        return $this->render('fault', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionAwait()
    {

            $action = Yii::$app->request->post('action');

            $selection = (array)Yii::$app->request->post('selection');

                if ($action != '') {

                    foreach ($selection as $key => $value) {
                        $e = Devices::find()->where(['id' => $value])->one();


                        Devices::updateAll(['status'=>StockDevices::available,
                            'created_by'=>Yii::$app->user->identity->id,
                            // 'location_from'=>$e['border_port'],
                            'view_status'=>Devices::awaiting_receive,
                            'created_at' => date('Y-m-d H:i:s')],['id'=>$value]);

                        $stock = new StockDevicesReport();
                        $stock->serial_no = $e['serial_no'];
                        $stock->branch = $e['branch'];
                        $stock->status = StockDevices::available;
                        $stock->created_by = Yii::$app->user->identity->id;
                        $stock->created_at = date('Y-m-d H:m');
                        $stock->save();


                    }

                    Yii::$app->session->setFlash('', [
                        'type' => 'success',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'Total device ' . count($selection) . ' have been  successfully allocated as available',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);

                    return $this->redirect(['fault']);

                } else {
                    Yii::$app->session->setFlash('', [
                        'type' => 'danger',
                        'duration' => 5000,
                        'icon' => 'fa fa-check',
                        'message' => 'You have not selected Sales Person ',
                        'positonY' => 'top',
                        'positonX' => 'right',
                    ]);
                    return $this->redirect(['fault']);
                }



    }
    /**
     * Displays a single Devices model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Devices model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {

        if (!Yii::$app->user->isGuest) {
            $model = new Devices();

            if (Yii::$app->user->can('addDevices')) {

                if ($model->load(Yii::$app->request->post())) {

                    try {
                        $createdBY = $model->created_by = Yii::$app->user->identity->id;
                        $serial = $model->serial_no;
                        $status = $model->status;
                        $branch = $model->branch;
                        $type = $model->type;
                        $timeCreated = $model->created_at = date('Y-m-d H:i:s');
                        $received_from = $model->received_from;
                        $border = $model->border_port;
                        $staff = $model->received_from_staff;
                        $remark = $model->remark;
                        $partner = $model->partiner;
                        $category = $model->device_category;
                        $line_data = preg_split("/\\r\\n|\\r|\\n/", $serial);
                        foreach ($line_data as $key => $value) {

                            $checkSerial=Devices::findOne(['serial_no'=>$value]);
                            if (empty($checkSerial)){
                                $model = new Devices();
                                $model->serial_no = $value;
                                $model->received_from = $received_from;
                                $model->device_from = $received_from;
                                $model->device_category = $category;
                                $model->partiner = $partner;
                                $model->border_port = $border;
                                $model->stock_status = $border;
                                $model->created_at = $timeCreated;
                                $model->created_by = $createdBY;
                                $model->status = $status;
                                $model->branch = $branch;
                                $model->type = $type;
                                $model->remark = $remark;
                                $model->save();

                                Devices::updateAll(['view_status'=>Devices::awaiting_receive],['serial_no'=>$value]);
                            }



                        }
                        $data = count($line_data);
                        Yii::$app->session->setFlash('', [
                            'type' => 'success',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Total device ' . $data . ' have been  registered successfully',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);
                        return $this->redirect(['index']);
                    } catch (\Exception $e) {
                        Yii::$app->session->setFlash('', [
                            'type' => 'danger',
                            'duration' => 5000,
                            'icon' => 'fa fa-check',
                            'message' => 'Fail, there is an error occured',
                            'positonY' => 'top',
                            'positonX' => 'right',
                        ]);
                        return $this->redirect(['index']);
                    }
                }

                return $this->render('create', [
                    'model' => $model,
                ]);

            } else {
                Yii::$app->session->setFlash('', [
                    'type' => 'danger',
                    'duration' => 5000,
                    'icon' => 'fa fa-warning',
                    'message' => 'You dont have a permission',
                    'positonY' => 'top',
                    'positonX' => 'right',
                ]);

                return $this->redirect(['index']);
            }
        } else {
            $model = new LoginForm();
            return $this->redirect(['site/login',
                'model' => $model,
            ]);
        }

    }

    /**
     * Updates an existing Devices model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionActivate($id)
    {
        $model = $this->findModel($id);
        $model->view_status=Devices::awaiting_receive;
        $model->save();
        Yii::$app->session->setFlash('', [
            'type' => 'success',
            'duration' => 5000,
            'icon' => 'fa fa-warning',
            'message' => 'Device successfully moved to awaiting receive',
            'positonY' => 'top',
            'positonX' => 'right',
        ]);
        return $this->redirect(['index']);

    }

    /**
     * Deletes an existing Devices model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
       // $this->findModel($id)->delete();

      //  return $this->redirect(['index']);
    }

    /**
     * Finds the Devices model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Devices the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Devices::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
